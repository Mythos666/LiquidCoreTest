apply plugin: 'com.android.application'

android {
    compileSdkVersion 28
    defaultConfig {
        applicationId "com.mythos.myapplication"
        minSdkVersion 22
        targetSdkVersion 28
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags "-frtti -std=c++11 -fsigned-char -fexceptions "
                arguments "-DANDROID_STL=c++_static"
                abiFilters "x86", "armeabi-v7a", "x86_64", "arm64-v8a"
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    externalNativeBuild {
        cmake {
            path "src/main/cpp/CMakeLists.txt"
            version "3.6.0"
        }
    }
}
configurations {
    liquidcore {}
}
repositories {
    flatDir {
        dirs './libs'
    }
}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    liquidcore fileTree(dir: 'libs', include: ['LiquidCore-release.aar'])
    implementation(name:'LiquidCore-release', ext:'aar')
}

task extractAddOnLibsAndHeaders(type: Sync) {
    dependsOn configurations.liquidcore

    from {
        configurations.liquidcore.collect {zipTree(it)}
    }
    include "jni/**/*.so", "include/**/*"
    into "build/liquidcore-addon"
}
afterEvaluate {
    def addon = file('build/liquidcore-addon')
    if (!addon.exists()) {
        if (project.hasProperty("externalNativeBuildDebug")) {
            externalNativeBuildDebug.dependsOn extractAddOnLibsAndHeaders
        }
        if (project.hasProperty("externalNativeBuildRelease")) {
            externalNativeBuildRelease.dependsOn extractAddOnLibsAndHeaders
        }
    }
}